const {NODE_TYPES, METADATA} = require('../constants');
const {
  getOptionValues,
  getTotalLinesInFunction,
  getAllJSXLineNumbers,
} = require('../utils');

module.exports = {
  meta: {
    type: METADATA.TYPE,
    doc: METADATA.DOCUMENT,
    schema: [METADATA.SCHEMA],
    messages: METADATA.MESSAGES,
  },
  create(context) {
    const option = context.options[0];
    const {maxLines, maxJSLines, maxJSXLines} = getOptionValues(option);

    function checkMaxLine(node) {
      const functionName = getFunctionName(node);
      const nodeStartLine = node.loc.start.line;
      const nodeEndLine = node.loc.end.line;
      const totalLinesInNode = getTotalLinesInFunction(
        nodeStartLine,
        nodeEndLine
      );
      const allJSXLineNumbers = getAllJSXLineNumbers(node);
      const totalJSXLines = allJSXLineNumbers.length;
      const totalJSLines = totalLinesInNode - totalJSXLines;

      if (totalJSLines > maxJSLines) {
        context.report({
          node,
          messageId: 'maxJSLines',
          data: {maxJSLines, totalJSLines, functionName},
        });
      }

      if (totalJSXLines > maxJSXLines) {
        context.report({
          node,
          messageId: 'maxJSXLines',
          data: {maxJSXLines, totalJSXLines, functionName},
        });
      }

      if (totalLinesInNode > maxLines) {
        context.report({
          node,
          messageId: 'maxLines',
          data: {maxLines, totalLinesInNode, functionName},
        });
      }
    }

    return {
      [NODE_TYPES.FUNCTION_DECLARATION]: checkMaxLine,
      [NODE_TYPES.ARRROW_FUNCTION_EXPRESSION]: checkMaxLine,
      [NODE_TYPES.FUNCTION_EXPESSION]: checkMaxLine,
    };
  },
};

function getFunctionName(node) {
  if (node.id) {
    return node.id.name;
  } else if (node.parent.id) {
    return node.parent.id.name;
  } else if (node.parent.key) {
    return node.parent.key.name;
  } else {
    return node.parent.type;
  }
}
