const {find} = require('abstract-syntax-tree');
const {CONST, NODE_TYPES} = require('./constants');

module.exports = {
  getOptionValues,
  getAllJSXLineNumbers,
  getTotalLinesInFunction,
  removeDuplicatesInList,
  getLineNumbersInRange,
  getTagLineNumbers,
};

function getOptionValues(option) {
  let maxLines = CONST.MAX_LINES_DEFAULT;
  let maxJSLines = CONST.MAX_JS_LINES_DEFAULT;
  let maxJSXLines = CONST.MAX_JSX_LINES_DEFAULT;
  if (option && option.maxLines && typeof option.maxLines === CONST.NUMBER) {
    maxLines = option.maxLines;
  }
  if (
    option &&
    option.maxJSLines &&
    typeof option.maxJSLines === CONST.NUMBER
  ) {
    maxJSLines = option.maxJSLines;
  }
  if (
    option &&
    option.maxJSXLines &&
    typeof option.maxJSXLines === CONST.NUMBER
  ) {
    maxJSXLines = option.maxJSXLines;
  }
  return {maxLines, maxJSLines, maxJSXLines};
}

function getAllJSXLineNumbers(node) {
  const allJSXElementsInNode = find(node, NODE_TYPES.JSX_ELEMENT);
  return allJSXElementsInNode.reduce((allLines, node) => {
    const nodeStartLine = node.loc.start.line;
    const nodeEndLine = node.loc.end.line;
    const openingElementStartLine = node.openingElement.loc.start.line;
    const openingElementEndLine = node.openingElement.loc.end.line;
    const tagAttributeLines = getTagLineNumbers(
      openingElementStartLine,
      openingElementEndLine
    );
    return removeDuplicatesInList([
      ...allLines,
      nodeStartLine,
      nodeEndLine,
      ...tagAttributeLines,
    ]);
  }, []);
}

function getTotalLinesInFunction(startLine, endLine) {
  return endLine - startLine + 1;
}

function removeDuplicatesInList(list) {
  return list.filter((lineNumber, index) => list.indexOf(lineNumber) === index);
}

function getLineNumbersInRange(start, end) {
  const list = [];
  for (let i = start; i <= end; i++) {
    list.push(i);
  }
  return list;
}

function getTagLineNumbers(tagStart, tagEnd) {
  if (tagStart < tagEnd) {
    return getLineNumbersInRange(tagStart, tagEnd);
  } else {
    return [tagStart];
  }
}
