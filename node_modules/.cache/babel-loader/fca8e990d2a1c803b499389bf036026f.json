{"ast":null,"code":"/* eslint-disable no-console */\n\n/**\n * Contains API class to setup new axios instance\n */\nimport axios from 'axios';\nimport { ROUTES } from '../Routes.constants';\nimport { KEYS } from '../dataKeys';\nconst CancelToken = axios.CancelToken;\n/**\n * API class to create axios instnces with passed base URL.\n */\n\nexport class APIInstance {\n  constructor(options) {\n    this.baseURL = options.baseURL;\n    this.api = this.axiosInstance();\n    this.pending = {};\n    this.CancelToken = axios.CancelToken;\n    this.setCancelPendingInterceptor(this.api);\n  }\n  /**\n   * Create axios instance with user timezone and passed base URL\n   */\n\n\n  axiosInstance() {\n    this.api = axios.create({\n      baseURL: this.baseURL\n    });\n    return this.api;\n  } // update pending requests (add || delete, cancel)\n\n\n  updatePending(config, cancel) {\n    let url = '';\n\n    if (config && config.url) {\n      url = `${config.baseURL}${config.url}`;\n    } // Return in case method does not exists\n\n\n    if (!config || !config.method) {\n      return;\n    }\n\n    let flagUrl = '';\n\n    if (config.method) {\n      flagUrl = url + '&' + config.method;\n    }\n\n    if (config.params) {\n      flagUrl += '&' + JSON.stringify(config.params);\n    }\n\n    if (cancel) {\n      this.pending[flagUrl] = cancel;\n    } else {\n      delete this.pending[flagUrl];\n    }\n  } // set cancel pending interceptor for all requests\n  // eslint-disable-next-line weavers-react/react_maxlines_per_function\n\n\n  setCancelPendingInterceptor(instance) {\n    if (!instance) {\n      instance = this.axiosInstance();\n    }\n\n    instance.interceptors.request.use(config => {\n      // eslint-disable-next-line no-console\n      if (config.noCancel) {\n        return config;\n      }\n\n      const token = localStorage.getItem(KEYS.ACCESS_TOKEN);\n\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n\n      config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      config.cancelToken = new CancelToken(cancel => {\n        this.updatePending(config, cancel);\n      });\n      return config;\n    });\n    instance.interceptors.response.use(response => {\n      this.updatePending(response.config);\n      return response;\n    }, error => {\n      const {\n        response\n      } = error;\n\n      if (response && response.status === 401) {\n        localStorage.clear();\n        window.location = ROUTES.LOGIN;\n      }\n\n      this.updatePending(error.config);\n      return Promise.reject(error);\n    });\n    return instance;\n  } // cancel all pending requests\n\n\n  cancelPending() {\n    Object.keys(this.pending).forEach(e => {\n      if (this.pending[e]) {\n        this.pending[e]();\n        delete this.pending[e];\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/factweavers/Sites/haigreve-ui/src/api/apiInstance.js"],"names":["axios","ROUTES","KEYS","CancelToken","APIInstance","constructor","options","baseURL","api","axiosInstance","pending","setCancelPendingInterceptor","create","updatePending","config","cancel","url","method","flagUrl","params","JSON","stringify","instance","interceptors","request","use","noCancel","token","localStorage","getItem","ACCESS_TOKEN","headers","cancelToken","response","error","status","clear","window","location","LOGIN","Promise","reject","cancelPending","Object","keys","forEach","e"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/**\n * Contains API class to setup new axios instance\n */\nimport axios from 'axios';\n\nimport { ROUTES } from '../Routes.constants';\n\nimport { KEYS } from '../dataKeys';\n\nconst CancelToken = axios.CancelToken;\n\n/**\n * API class to create axios instnces with passed base URL.\n */\nexport class APIInstance {\n  constructor(options) {\n    this.baseURL = options.baseURL;\n    this.api = this.axiosInstance();\n    this.pending = {};\n    this.CancelToken = axios.CancelToken;\n    this.setCancelPendingInterceptor(this.api);\n  }\n\n  /**\n   * Create axios instance with user timezone and passed base URL\n   */\n  axiosInstance() {\n    this.api = axios.create({\n      baseURL: this.baseURL,\n    });\n    return this.api;\n  }\n\n  // update pending requests (add || delete, cancel)\n  updatePending(config, cancel) {\n    let url = '';\n    if (config && config.url) {\n      url = `${config.baseURL}${config.url}`;\n    }\n    // Return in case method does not exists\n    if (!config || !config.method) {\n      return;\n    }\n\n    let flagUrl = '';\n    if (config.method) {\n      flagUrl = url + '&' + config.method;\n    }\n    if (config.params) {\n      flagUrl += '&' + JSON.stringify(config.params);\n    }\n    if (cancel) {\n      this.pending[flagUrl] = cancel;\n    } else {\n      delete this.pending[flagUrl];\n    }\n  }\n\n  // set cancel pending interceptor for all requests\n  // eslint-disable-next-line weavers-react/react_maxlines_per_function\n  setCancelPendingInterceptor(instance) {\n    if (!instance) {\n      instance = this.axiosInstance();\n    }\n    instance.interceptors.request.use((config) => {\n      // eslint-disable-next-line no-console\n      if (config.noCancel) {\n        return config;\n      }\n      const token = localStorage.getItem(KEYS.ACCESS_TOKEN);\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n\n      config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n\n      config.cancelToken = new CancelToken((cancel) => {\n        this.updatePending(config, cancel);\n      });\n      return config;\n    });\n\n    instance.interceptors.response.use(\n      (response) => {\n        this.updatePending(response.config);\n        return response;\n      },\n      (error) => {\n        const { response } = error;\n        if (response && response.status === 401) {\n          localStorage.clear();\n          window.location = ROUTES.LOGIN;\n        }\n        this.updatePending(error.config);\n        return Promise.reject(error);\n      }\n    );\n    return instance;\n  }\n\n  // cancel all pending requests\n  cancelPending() {\n    Object.keys(this.pending).forEach((e) => {\n      if (this.pending[e]) {\n        this.pending[e]();\n        delete this.pending[e];\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}